# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on windows platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        platform: [linux,x64]
        build_type: [release]
        include:
          - os: windows-latest
            platform: x64
            build-type: release
          - os: ubuntu-latest
            platform: linux
            build-type: release
        exclude:
          - os: windows-latest
            platform: linux
          - os: ubuntu-latest
            platform: x64

    env:
       # Do "out of source" build to shorten the path (due to MAX_PATH issue on Windows when vcpkg builds gRPC)
       # This must match the build directory from the cmake preset used
       # this can be removed when we start downloading dependencies as packages
      build_dir: ../out/${{ matrix.config.cmake_preset }}
    steps:
    - uses: actions/checkout@v4

    - name: Initialize MSVC Developer Command Prompt
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.config.msvc_arch }}

    - name: Install ninja-build tool
      uses: seanmiddleditch/gha-setup-ninja@v4
            
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake --preset ${{ matrix.platform }}-${{ matrix.build_type }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build --preset ${{ matrix.platform }}-${{ matrix.build_type }}

    
